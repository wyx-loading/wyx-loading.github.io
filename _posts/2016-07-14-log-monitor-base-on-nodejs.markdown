---
layout: post
title:  log monitor base on nodejs
date:   2016-07-14 14:47:00 +0800
categories: ['blog', 'nodejs']
---

## 基于Nodejs的log监控工具--[Log.io][Log.io site]

### 介绍

首先介绍一下log.io吧，基于Nodejs的实时日志监控工具。  
实现主要分为两部分，server & harvester。  

 - server主要提供给前端浏览器websocket连接，并且将harvesters提交的日志推送到已连接的浏览器。  
 - harvester负责监控日志文件的变化并且将变更通过tcp发送到server。也支持自定义的harvester，只需要按照server接口格式包装消息即可。  
 - 一个server可以对应多个harvester。  
 - 提供的harvester实现，通过简单的配置即可使用。  

---

### 为什么要用

想用这个的原因很简单，开发的时候，需要部署服务器到测试机（非本地），虽然提交上去的版本已经在本机做过"基本"测试，但是还是会出现很多问题，毕竟没有很严格的测试过，部署上去也是为了方便其他同事测试，所以能够方便地监控到服务器机子上的log就可以为查错提供便利。
（当然，如果你有实现类似RabbitMQ将log输出集中监控，这么高端的东西的话你可以pass了）

### 使用

log.io的使用很简单，按照项目地址README即可。

### 一点点想法

主要提一下发现的问题和可以改进的地方。


 - 由于服务器的log文件按照日期来分割，且只有在写入log的时候才会检查文件的创建日期，所以会出现第二天的log文件还是前一天（或者前好几天）的日志。此时log文件改名，创建，写入第一条log，log.io不能捕捉到该log，这算是一个不完善的功能点吧。（有兴趣的可以直接动手处理一下）
 - 浏览器接收到特殊log是不是可以弹个小窗提醒一下，chrome是可以实现这个功能的吧？
 - 由于需要保持前端浏览器连接的情况下才能接收到从连接建立时间点之后的log变更，如果我们需要在离线的情况下也能接收到特殊log的话，比如我想在输出Exception信息的时候，直接发邮件给我（或者其他IM方式通知，按照个人情况选择），此时就体现出开源项目的好处，直接改代码。这里有两个选择，可以在server端做这个处理，也可以在harvester做这个处理，上面也提到过支持自定义harvester。这里我就选择在harvester做处理（如果在server处理，需要判断是从哪个harvester收集上来的报错等等，万一那个log不是我这边抛的呢，应该将不同日志收集的异常信息发送给不同负责人）。关于这个harvester的实现方法就很多了，我这边的实现简单来说就是缓存小部分的日志，并且判断日志是否包含设置的关键字，如果有，将关键字前后N行通过邮件发送到指定收件人。此处还加了发现关键字后，将相关信息压入列表，延时发送。主要是同时抛出多个异常的时候，可以一封邮件发送多个异常。并且对关键字监控做冷却，即短时间内频繁产生Exception的情况下，只发送前面的，之后的忽略（此处还有个改进，你怎么这么多改进。。。将被忽略的日志append到某个文件，将文件链接推送给server或者什么地方，浏览器直接访问该文件看忽略的异常什么的应该也是不错的想法吧）。

大概就上面这些了。


[Log.io site]: https://github.com/NarrativeScience/Log.io